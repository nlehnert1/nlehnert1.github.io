{"version":3,"sources":["Home.js","Components/Project.js","Components/WorkExperience.js","Experience.js","Components/Info.js","GeneralInfo.js","Main.js","serviceWorker.js","index.js"],"names":["Home","Component","Project","props","Fragment","title","dateRange","description","WorkExperience","company","projectName","Experience","Info","content","href","link","GeneralInfo","Main","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAeeA,E,iLAXP,OACI,6BACI,wDACA,sKAEA,sK,GAPGC,aCcJC,MAdf,SAAiBC,GACb,OAAO,kBAAC,IAAMC,SAAP,KACH,4BACKD,EAAME,OAEX,4BACKF,EAAMG,WAEX,2BACKH,EAAMI,eCCJC,MAVf,SAAwBL,GACpB,OAAO,kBAAC,IAAMC,SAAP,KACH,4BAAKD,EAAME,OACX,4BAAKF,EAAMM,SACX,2BAAIN,EAAMO,aACV,2BAAIP,EAAMG,WACV,2BAAIH,EAAMI,eCkBHI,E,iLApBP,OACI,6BACI,+CACI,kBAAC,EAAD,CAAgBN,MAAM,mBACpBI,QAAQ,iCACRC,YAAY,mBACZJ,UAAU,oBACVC,YAAY,uFACd,kBAAC,EAAD,CACAF,MAAM,mBACNC,UAAU,yBACVC,YAAY,2a,GAbPN,aCMVW,MARf,SAAcT,GACV,OAAO,kBAAC,IAAMC,SAAP,KACH,4BAAKD,EAAME,OACX,2BAAIF,EAAMU,SACV,uBAAGC,KAAMX,EAAMY,MAAOZ,EAAMY,QCYrBC,E,iLAZP,OACI,6BACI,4CACA,kBAAC,EAAD,CAAMX,MAAM,OAAOQ,QAAQ,kBAC3B,kBAAC,EAAD,CAAMR,MAAM,SAASU,KAAK,iCAC1B,kBAAC,EAAD,CAAMV,MAAM,WAAWQ,QAAQ,iBAC/B,kBAAC,EAAD,CAAMR,MAAM,gC,GARFJ,aCgCXgB,E,iLAtBP,OACI,oCACA,kBAAC,IAAD,KACI,6BACI,+CACA,wBAAIC,UAAU,UACV,4BAAI,kBAAC,IAAD,CAASC,GAAG,SAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,eAAZ,eACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,kBAER,yBAAKD,UAAU,WACX,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,QAAQC,UAAWtB,IACrC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,cAAcC,UAAWX,IAC3C,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,eAAeC,UAAWN,Y,GAfjDf,aCACsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3f6e359.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Hello! My name is Chloe.</h2>\r\n                <p>This is the home page for my website. Thanks to React, this is technically a \"one-page\" website despite having multiple separate views.</p>\r\n\r\n                <p>I guess I'm just filling space now. But React has been pretty cool to work with so far, despite a little bit of initial confusion.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from \"react\";\r\n\r\nfunction Project(props) {\r\n    return <React.Fragment>\r\n        <h2>\r\n            {props.title}\r\n        </h2>\r\n        <h3>\r\n            {props.dateRange}\r\n        </h3>\r\n        <p>\r\n            {props.description}\r\n        </p>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default Project;","import React, {Component} from \"react\";\r\n\r\nfunction WorkExperience(props) {\r\n    return <React.Fragment>\r\n        <h2>{props.title}</h2>\r\n        <h3>{props.company}</h3>\r\n        <p>{props.projectName}</p>\r\n        <p>{props.dateRange}</p>\r\n        <p>{props.description}</p>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default WorkExperience;","import React, {Component} from \"react\";\r\nimport Project from \"./Components/Project\";\r\nimport WorkExperience from \"./Components/WorkExperience\";\r\n\r\nclass Experience extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Work Experience</h1>\r\n                    <WorkExperience title=\"Unity Programmer\"\r\n                      company=\"University of Nebraska-Lincoln\"\r\n                      projectName=\"Agpocalypse 2050\"\r\n                      dateRange=\"06/2019 - Present\"\r\n                      description=\"I was responsible for creating C# scripts to improve the functionality of the game\"/>\r\n                    <Project \r\n                    title=\"NDOT NTIP System\"\r\n                    dateRange=\"August 2019 - May 2020\"\r\n                    description=\"Worked as a developer for the Nebraska Department of Transportation (NDOT)'s Nebraska Transportation \r\n                    Information Portal (NTIP) system through the Raikes School Design Studio. Helped to implement logic in the Crash \r\n                    Diagrammer, including crash placement within an intersection and the functionality to retrieve OnBase report documents. \r\n                    Built most of the frontend for the Federal Motor Carrier data integration.\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Experience;","import React, {Component} from \"react\";\r\n\r\nfunction Info(props) {\r\n    return <React.Fragment>\r\n        <h2>{props.title}</h2>\r\n        <p>{props.content}</p>\r\n        <a href={props.link}>{props.link}</a>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default Info;","import React, {Component} from \"react\";\r\n\r\nimport Info from \"./Components/Info\";\r\n\r\nclass GeneralInfo extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>General Info</h1>\r\n                <Info title=\"Name\" content=\"Chloe Lehnert\"/>\r\n                <Info title=\"GitHub\" link=\"https://github.com/nlehnert1\"/>\r\n                <Info title=\"LinkedIn\" content=\"Coming soon!\"/>\r\n                <Info title=\"Languages &amp; Frameworks\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GeneralInfo;","import React, { Component } from \"react\";\r\nimport {\r\n    Router,\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Home\";\r\nimport Experience from \"./Experience\";\r\nimport GeneralInfo from \"./GeneralInfo\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            <HashRouter>\r\n                <div>\r\n                    <h1>Chloe's Website</h1>\r\n                    <ul className=\"header\">\r\n                        <li><NavLink to=\"/home\">Home</NavLink></li>\r\n                        <li><NavLink to=\"/experience\">Experience</NavLink></li>\r\n                        <li><NavLink to=\"/generalinfo\">General Info</NavLink></li>\r\n                    </ul>\r\n                    <div className=\"content\">\r\n                        <Route exact path=\"/home\" component={Home}/>\r\n                        <Route exact path=\"/experience\" component={Experience}/>\r\n                        <Route exact path=\"/generalInfo\" component={GeneralInfo}/>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport Main from './Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}